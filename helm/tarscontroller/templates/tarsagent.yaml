apiVersion: v1
kind: ServiceAccount
metadata:
  name: tars-agent
  namespace: tars-system
---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tars-system:tars-agent
rules:
  - apiGroups: [ "" ]
    resources: [ persistentvolumeclaims ]
    verbs: [ get,list,watch,update ]
  - apiGroups: [ "" ]
    resources: [ persistentvolumes ]
    verbs: [ get,list,watch,update,create ]
  - apiGroups: [ "" ]
    resources: [ nodes ]
    verbs: [ get,list,watch ]
  - apiGroups: [ "storage.k8s.io" ]
    resources: [ storageclasses ]
    verbs: [ get,list,watch ]
---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tars-system:tars-agent
subjects:
  - kind: ServiceAccount
    name: tars-agent
    namespace: tars-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tars-system:tars-agent
---


apiVersion: v1
kind: ConfigMap
metadata:
  name: tars-agent
  namespace: tars-system
data:
  crontab.config: |-
    0 3 * * * ? find /usr/local/app/tars/app_log/ -mtime +5 -name "*.log" | xargs rm -f
    0 3 * * * ? find /usr/local/app/tars/app_log/ -mtime +5 -name "core.*" | xargs rm -f
---

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: tars-agent
  namespace: tars-system
  labels:
    tars.io/Agent: "true"
spec:
  selector:
    matchLabels:
      tars.io/Agent: "true"
  template:
    metadata:
      labels:
        tars.io/Agent: "true"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: tars.io/node
                    operator: Exists
                    values: [ ]
      serviceAccountName: tars-agent
      containers:
        - image: "{{.Values.controller.registry}}/tarsagent:{{.Values.controller.tag}}"
          imagePullPolicy: "Always"
          name: tars-agent
          env:
            - name: NodeName
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: TLVInHost
              value: {{.Values.agent.tlv_in_host}}
          volumeMounts:
            - mountPath: /etc/tarsagent
              name: etc-tarsagent-dir
            - mountPath: /etc/localtime
              name: host-timezone
              readOnly: true
            - mountPath: /usr/local/app/tars/app_log
              name: host-log-dir
            - mountPath: /usr/local/app/tars/host-mount
              name: host-mount-dir
      volumes:
        - configMap:
            defaultMode: 420
            name: tars-agent
            optional: true
          name: etc-tarsagent-dir
        - hostPath:
            path: /etc/localtime
            type: ""
          name: host-timezone
        - hostPath:
            path: /usr/local/app/tars/app_log
            type: DirectoryOrCreate
          name: host-log-dir
        - hostPath:
            path: {{.Values.agent.tlv_in_host}}
            type: DirectoryOrCreate
          name: host-mount-dir
    {{if.Values.controller.secret}}
      imagePullSecrets:
        - name: "{{.Values.controller.secret}}"
    {{end}}
