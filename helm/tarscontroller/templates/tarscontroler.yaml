apiVersion: v1
kind: ServiceAccount
metadata:
  name: tars-controller
  namespace: tars-system
---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: tars-controller
  namespace: tars-system
rules:
  - apiGroups: [ coordination.k8s.io ]
    resources: [ leases ]
    verbs: [ create, get, list, watch, patch, update ]
---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tars-controller
  namespace: tars-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: tars-controller
subjects:
  - kind: ServiceAccount
    name: tars-controller
    namespace: tars-system
---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: tars-system:tars-controller
rules:
  - apiGroups: [ "" ]
    resources: [ services ,persistentvolumeclaims ]
    verbs: [ create, get, list, delete, watch, patch, update , deletecollection ]
  - apiGroups: [ "" ]
    resources: [ pods,pods/status ]
    verbs: [ list,get,watch ]
  - apiGroups: [ "" ]
    resources: [ events ]
    verbs: [ create ]
  - apiGroups: [ "" ]
    resources: [ nodes ]
    verbs: [ get, list, watch, patch, update ]
  - apiGroups: [ apps ]
    resources: [ statefulsets,daemonsets ]
    verbs: [ create, get, list, delete, watch, patch, update , deletecollection ]
  - apiGroups: [ k8s.tars.io ]
    resources: [ ttrees, ttemplates, tdeploys, timages, tframeworkconfigs ]
    verbs: [ get, list, watch ,patch, update ]
  - apiGroups: [ k8s.tars.io ]
    resources: [ taccounts,tconfigs,tservers,tservers/status,texitedrecords,tgateways,tendpoints,tendpoints/status ]
    verbs: [ create, get, list, delete, watch, patch, update , deletecollection ]
---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tars-system:tars-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tars-system:tars-controller
subjects:
  - kind: ServiceAccount
    name: tars-controller
    namespace: tars-system
---

apiVersion: v1
kind: Service
metadata:
  name: tars-webhook-service
  namespace: tars-system
spec:
  ports:
    - name: webhook
      port: 443
      protocol: TCP
      targetPort: 443
  selector:
    tars.io/Controller: "true"
  sessionAffinity: ClientIP
  type: ClusterIP

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: tars-controller-manger
  namespace: tars-system
spec:
  replicas: 1
  selector:
    matchLabels:
      tars.io/Controller: "true"
  template:
    metadata:
      name: tars-controller
      labels:
        tars.io/Controller: "true"
    spec:
      containers:
        - image: "{{.Values.controller.registry}}/tarscontroller:{{.Values.controller.tag}}"
          imagePullPolicy: Always
          name: tars-controller
      enableServiceLinks: false
      restartPolicy: Always
      serviceAccountName: tars-controller
    {{if.Values.controller.secret}}
      imagePullSecrets:
        - name: "{{.Values.controller.secret}}"
    {{end}}