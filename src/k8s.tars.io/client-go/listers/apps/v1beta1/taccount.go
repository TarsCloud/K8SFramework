/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1beta1 "k8s.tars.io/apps/v1beta1"
)

// TAccountLister helps list TAccounts.
// All objects returned here must be treated as read-only.
type TAccountLister interface {
	// List lists all TAccounts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.TAccount, err error)
	// TAccounts returns an object that can list and get TAccounts.
	TAccounts(namespace string) TAccountNamespaceLister
	TAccountListerExpansion
}

// tAccountLister implements the TAccountLister interface.
type tAccountLister struct {
	indexer cache.Indexer
}

// NewTAccountLister returns a new TAccountLister.
func NewTAccountLister(indexer cache.Indexer) TAccountLister {
	return &tAccountLister{indexer: indexer}
}

// List lists all TAccounts in the indexer.
func (s *tAccountLister) List(selector labels.Selector) (ret []*v1beta1.TAccount, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.TAccount))
	})
	return ret, err
}

// TAccounts returns an object that can list and get TAccounts.
func (s *tAccountLister) TAccounts(namespace string) TAccountNamespaceLister {
	return tAccountNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TAccountNamespaceLister helps list and get TAccounts.
// All objects returned here must be treated as read-only.
type TAccountNamespaceLister interface {
	// List lists all TAccounts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.TAccount, err error)
	// Get retrieves the TAccount from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.TAccount, error)
	TAccountNamespaceListerExpansion
}

// tAccountNamespaceLister implements the TAccountNamespaceLister
// interface.
type tAccountNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TAccounts in the indexer for a given namespace.
func (s tAccountNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.TAccount, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.TAccount))
	})
	return ret, err
}

// Get retrieves the TAccount from the indexer for a given namespace and name.
func (s tAccountNamespaceLister) Get(name string) (*v1beta1.TAccount, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("taccount"), name)
	}
	return obj.(*v1beta1.TAccount), nil
}
