/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta3

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1beta3 "k8s.tars.io/apis/tars/v1beta3"
)

// TFrameworkConfigLister helps list TFrameworkConfigs.
// All objects returned here must be treated as read-only.
type TFrameworkConfigLister interface {
	// List lists all TFrameworkConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta3.TFrameworkConfig, err error)
	// TFrameworkConfigs returns an object that can list and get TFrameworkConfigs.
	TFrameworkConfigs(namespace string) TFrameworkConfigNamespaceLister
	TFrameworkConfigListerExpansion
}

// tFrameworkConfigLister implements the TFrameworkConfigLister interface.
type tFrameworkConfigLister struct {
	indexer cache.Indexer
}

// NewTFrameworkConfigLister returns a new TFrameworkConfigLister.
func NewTFrameworkConfigLister(indexer cache.Indexer) TFrameworkConfigLister {
	return &tFrameworkConfigLister{indexer: indexer}
}

// List lists all TFrameworkConfigs in the indexer.
func (s *tFrameworkConfigLister) List(selector labels.Selector) (ret []*v1beta3.TFrameworkConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta3.TFrameworkConfig))
	})
	return ret, err
}

// TFrameworkConfigs returns an object that can list and get TFrameworkConfigs.
func (s *tFrameworkConfigLister) TFrameworkConfigs(namespace string) TFrameworkConfigNamespaceLister {
	return tFrameworkConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TFrameworkConfigNamespaceLister helps list and get TFrameworkConfigs.
// All objects returned here must be treated as read-only.
type TFrameworkConfigNamespaceLister interface {
	// List lists all TFrameworkConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta3.TFrameworkConfig, err error)
	// Get retrieves the TFrameworkConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta3.TFrameworkConfig, error)
	TFrameworkConfigNamespaceListerExpansion
}

// tFrameworkConfigNamespaceLister implements the TFrameworkConfigNamespaceLister
// interface.
type tFrameworkConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TFrameworkConfigs in the indexer for a given namespace.
func (s tFrameworkConfigNamespaceLister) List(selector labels.Selector) (ret []*v1beta3.TFrameworkConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta3.TFrameworkConfig))
	})
	return ret, err
}

// Get retrieves the TFrameworkConfig from the indexer for a given namespace and name.
func (s tFrameworkConfigNamespaceLister) Get(name string) (*v1beta3.TFrameworkConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta3.Resource("tframeworkconfig"), name)
	}
	return obj.(*v1beta3.TFrameworkConfig), nil
}
