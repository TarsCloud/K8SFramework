/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1beta1 "k8s.tars.io/apis/tars/v1beta1"
)

// TImageLister helps list TImages.
// All objects returned here must be treated as read-only.
type TImageLister interface {
	// List lists all TImages in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.TImage, err error)
	// TImages returns an object that can list and get TImages.
	TImages(namespace string) TImageNamespaceLister
	TImageListerExpansion
}

// tImageLister implements the TImageLister interface.
type tImageLister struct {
	indexer cache.Indexer
}

// NewTImageLister returns a new TImageLister.
func NewTImageLister(indexer cache.Indexer) TImageLister {
	return &tImageLister{indexer: indexer}
}

// List lists all TImages in the indexer.
func (s *tImageLister) List(selector labels.Selector) (ret []*v1beta1.TImage, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.TImage))
	})
	return ret, err
}

// TImages returns an object that can list and get TImages.
func (s *tImageLister) TImages(namespace string) TImageNamespaceLister {
	return tImageNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TImageNamespaceLister helps list and get TImages.
// All objects returned here must be treated as read-only.
type TImageNamespaceLister interface {
	// List lists all TImages in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.TImage, err error)
	// Get retrieves the TImage from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.TImage, error)
	TImageNamespaceListerExpansion
}

// tImageNamespaceLister implements the TImageNamespaceLister
// interface.
type tImageNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TImages in the indexer for a given namespace.
func (s tImageNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.TImage, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.TImage))
	})
	return ret, err
}

// Get retrieves the TImage from the indexer for a given namespace and name.
func (s tImageNamespaceLister) Get(name string) (*v1beta1.TImage, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("timage"), name)
	}
	return obj.(*v1beta1.TImage), nil
}
