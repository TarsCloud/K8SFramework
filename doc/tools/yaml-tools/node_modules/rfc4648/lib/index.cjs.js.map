{"version":3,"file":"index.cjs.js","sources":["../src/codec.ts","../src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/strict-boolean-expressions */\n\nexport interface Encoding {\n  bits: number\n  chars: string\n  codes?: { [char: string]: number }\n}\n\nexport interface ParseOptions {\n  loose?: boolean\n  out?: new (size: number) => { [index: number]: number }\n}\n\nexport interface StringifyOptions {\n  pad?: boolean\n}\n\nexport function parse(\n  string: string,\n  encoding: Encoding,\n  opts: ParseOptions = {}\n): Uint8Array {\n  // Build the character lookup table:\n  if (!encoding.codes) {\n    encoding.codes = {}\n    for (let i = 0; i < encoding.chars.length; ++i) {\n      encoding.codes[encoding.chars[i]] = i\n    }\n  }\n\n  // The string must have a whole number of bytes:\n  if (!opts.loose && (string.length * encoding.bits) & 7) {\n    throw new SyntaxError('Invalid padding')\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n\n    // If we get a whole number of bytes, there is too much padding:\n    if (!opts.loose && !(((string.length - end) * encoding.bits) & 7)) {\n      throw new SyntaxError('Invalid padding')\n    }\n  }\n\n  // Allocate the output:\n  const out = new (opts.out || Uint8Array)(\n    ((end * encoding.bits) / 8) | 0\n  ) as Uint8Array\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = encoding.codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError('Invalid character ' + string[i])\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << encoding.bits) | value\n    bits += encoding.bits\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= encoding.bits || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\nexport function stringify(\n  data: ArrayLike<number>,\n  encoding: Encoding,\n  opts: StringifyOptions = {}\n): string {\n  const { pad = true } = opts\n  const mask = (1 << encoding.bits) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | (0xff & data[i])\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > encoding.bits) {\n      bits -= encoding.bits\n      out += encoding.chars[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += encoding.chars[mask & (buffer << (encoding.bits - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * encoding.bits) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n","/* eslint-disable @typescript-eslint/strict-boolean-expressions */\n\nimport {\n  Encoding,\n  parse,\n  ParseOptions,\n  stringify,\n  StringifyOptions\n} from './codec'\n\nconst base16Encoding: Encoding = {\n  chars: '0123456789ABCDEF',\n  bits: 4\n}\n\nconst base32Encoding: Encoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bits: 5\n}\n\nconst base32HexEncoding: Encoding = {\n  chars: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bits: 5\n}\n\nconst base64Encoding: Encoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bits: 6\n}\n\nconst base64UrlEncoding: Encoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bits: 6\n}\n\nexport const base16 = {\n  parse(string: string, opts?: ParseOptions): Uint8Array {\n    return parse(string.toUpperCase(), base16Encoding, opts)\n  },\n\n  stringify(data: ArrayLike<number>, opts?: StringifyOptions): string {\n    return stringify(data, base16Encoding, opts)\n  }\n}\n\nexport const base32 = {\n  parse(string: string, opts: ParseOptions = {}): Uint8Array {\n    return parse(\n      opts.loose\n        ? string\n            .toUpperCase()\n            .replace(/0/g, 'O')\n            .replace(/1/g, 'L')\n            .replace(/8/g, 'B')\n        : string,\n      base32Encoding,\n      opts\n    )\n  },\n\n  stringify(data: ArrayLike<number>, opts?: StringifyOptions): string {\n    return stringify(data, base32Encoding, opts)\n  }\n}\n\nexport const base32hex = {\n  parse(string: string, opts?: ParseOptions): Uint8Array {\n    return parse(string, base32HexEncoding, opts)\n  },\n\n  stringify(data: ArrayLike<number>, opts?: StringifyOptions): string {\n    return stringify(data, base32HexEncoding, opts)\n  }\n}\n\nexport const base64 = {\n  parse(string: string, opts?: ParseOptions): Uint8Array {\n    return parse(string, base64Encoding, opts)\n  },\n\n  stringify(data: ArrayLike<number>, opts?: StringifyOptions): string {\n    return stringify(data, base64Encoding, opts)\n  }\n}\n\nexport const base64url = {\n  parse(string: string, opts?: ParseOptions): Uint8Array {\n    return parse(string, base64UrlEncoding, opts)\n  },\n\n  stringify(data: ArrayLike<number>, opts?: StringifyOptions): string {\n    return stringify(data, base64UrlEncoding, opts)\n  }\n}\n\nexport const codec = { parse, stringify }\n"],"names":["parse","string","encoding","opts","codes","i","chars","length","loose","bits","SyntaxError","end","out","Uint8Array","buffer","written","value","undefined","stringify","data","pad","mask","base16Encoding","base32Encoding","base32HexEncoding","base64Encoding","base64UrlEncoding","base16","toUpperCase","base32","replace","base32hex","base64","base64url","codec"],"mappings":";;;;AAAA;AAiBO,SAASA,KAAT,CACLC,MADK,EAELC,QAFK,EAGLC,IAHK,EAIO;AAAA,MADZA,IACY;AADZA,IAAAA,IACY,GADS,EACT;AAAA;;AACZ;AACA,MAAI,CAACD,QAAQ,CAACE,KAAd,EAAqB;AACnBF,IAAAA,QAAQ,CAACE,KAAT,GAAiB,EAAjB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACI,KAAT,CAAeC,MAAnC,EAA2C,EAAEF,CAA7C,EAAgD;AAC9CH,MAAAA,QAAQ,CAACE,KAAT,CAAeF,QAAQ,CAACI,KAAT,CAAeD,CAAf,CAAf,IAAoCA,CAApC;AACD;AACF,GAPW;;;AAUZ,MAAI,CAACF,IAAI,CAACK,KAAN,IAAgBP,MAAM,CAACM,MAAP,GAAgBL,QAAQ,CAACO,IAA1B,GAAkC,CAArD,EAAwD;AACtD,UAAM,IAAIC,WAAJ,CAAgB,iBAAhB,CAAN;AACD,GAZW;;;AAeZ,MAAIC,GAAG,GAAGV,MAAM,CAACM,MAAjB;;AACA,SAAON,MAAM,CAACU,GAAG,GAAG,CAAP,CAAN,KAAoB,GAA3B,EAAgC;AAC9B,MAAEA,GAAF,CAD8B;;AAI9B,QAAI,CAACR,IAAI,CAACK,KAAN,IAAe,EAAG,CAACP,MAAM,CAACM,MAAP,GAAgBI,GAAjB,IAAwBT,QAAQ,CAACO,IAAlC,GAA0C,CAA5C,CAAnB,EAAmE;AACjE,YAAM,IAAIC,WAAJ,CAAgB,iBAAhB,CAAN;AACD;AACF,GAvBW;;;AA0BZ,MAAME,GAAG,GAAG,KAAKT,IAAI,CAACS,GAAL,IAAYC,UAAjB,EACRF,GAAG,GAAGT,QAAQ,CAACO,IAAhB,GAAwB,CAAzB,GAA8B,CADpB,CAAZ,CA1BY;;AA+BZ,MAAIA,IAAI,GAAG,CAAX,CA/BY;;AAgCZ,MAAIK,MAAM,GAAG,CAAb,CAhCY;;AAiCZ,MAAIC,OAAO,GAAG,CAAd,CAjCY;;AAkCZ,OAAK,IAAIV,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGM,GAApB,EAAyB,EAAEN,EAA3B,EAA8B;AAC5B;AACA,QAAMW,KAAK,GAAGd,QAAQ,CAACE,KAAT,CAAeH,MAAM,CAACI,EAAD,CAArB,CAAd;;AACA,QAAIW,KAAK,KAAKC,SAAd,EAAyB;AACvB,YAAM,IAAIP,WAAJ,CAAgB,uBAAuBT,MAAM,CAACI,EAAD,CAA7C,CAAN;AACD,KAL2B;;;AAQ5BS,IAAAA,MAAM,GAAIA,MAAM,IAAIZ,QAAQ,CAACO,IAApB,GAA4BO,KAArC;AACAP,IAAAA,IAAI,IAAIP,QAAQ,CAACO,IAAjB,CAT4B;;AAY5B,QAAIA,IAAI,IAAI,CAAZ,EAAe;AACbA,MAAAA,IAAI,IAAI,CAAR;AACAG,MAAAA,GAAG,CAACG,OAAO,EAAR,CAAH,GAAiB,OAAQD,MAAM,IAAIL,IAAnC;AACD;AACF,GAlDW;;;AAqDZ,MAAIA,IAAI,IAAIP,QAAQ,CAACO,IAAjB,IAAyB,OAAQK,MAAM,IAAK,IAAIL,IAApD,EAA4D;AAC1D,UAAM,IAAIC,WAAJ,CAAgB,wBAAhB,CAAN;AACD;;AAED,SAAOE,GAAP;AACD;AAEM,SAASM,SAAT,CACLC,IADK,EAELjB,QAFK,EAGLC,IAHK,EAIG;AAAA,MADRA,IACQ;AADRA,IAAAA,IACQ,GADiB,EACjB;AAAA;;AAAA,cACeA,IADf;AAAA,wBACAiB,GADA;AAAA,MACAA,GADA,0BACM,IADN;AAER,MAAMC,IAAI,GAAG,CAAC,KAAKnB,QAAQ,CAACO,IAAf,IAAuB,CAApC;AACA,MAAIG,GAAG,GAAG,EAAV;AAEA,MAAIH,IAAI,GAAG,CAAX,CALQ;;AAMR,MAAIK,MAAM,GAAG,CAAb,CANQ;;AAOR,OAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGc,IAAI,CAACZ,MAAzB,EAAiC,EAAEF,CAAnC,EAAsC;AACpC;AACAS,IAAAA,MAAM,GAAIA,MAAM,IAAI,CAAX,GAAiB,OAAOK,IAAI,CAACd,CAAD,CAArC;AACAI,IAAAA,IAAI,IAAI,CAAR,CAHoC;;AAMpC,WAAOA,IAAI,GAAGP,QAAQ,CAACO,IAAvB,EAA6B;AAC3BA,MAAAA,IAAI,IAAIP,QAAQ,CAACO,IAAjB;AACAG,MAAAA,GAAG,IAAIV,QAAQ,CAACI,KAAT,CAAee,IAAI,GAAIP,MAAM,IAAIL,IAAjC,CAAP;AACD;AACF,GAjBO;;;AAoBR,MAAIA,IAAJ,EAAU;AACRG,IAAAA,GAAG,IAAIV,QAAQ,CAACI,KAAT,CAAee,IAAI,GAAIP,MAAM,IAAKZ,QAAQ,CAACO,IAAT,GAAgBA,IAAlD,CAAP;AACD,GAtBO;;;AAyBR,MAAIW,GAAJ,EAAS;AACP,WAAQR,GAAG,CAACL,MAAJ,GAAaL,QAAQ,CAACO,IAAvB,GAA+B,CAAtC,EAAyC;AACvCG,MAAAA,GAAG,IAAI,GAAP;AACD;AACF;;AAED,SAAOA,GAAP;AACD;;ACrHD;AAUA,IAAMU,cAAwB,GAAG;AAC/BhB,EAAAA,KAAK,EAAE,kBADwB;AAE/BG,EAAAA,IAAI,EAAE;AAFyB,CAAjC;AAKA,IAAMc,cAAwB,GAAG;AAC/BjB,EAAAA,KAAK,EAAE,kCADwB;AAE/BG,EAAAA,IAAI,EAAE;AAFyB,CAAjC;AAKA,IAAMe,iBAA2B,GAAG;AAClClB,EAAAA,KAAK,EAAE,kCAD2B;AAElCG,EAAAA,IAAI,EAAE;AAF4B,CAApC;AAKA,IAAMgB,cAAwB,GAAG;AAC/BnB,EAAAA,KAAK,EAAE,kEADwB;AAE/BG,EAAAA,IAAI,EAAE;AAFyB,CAAjC;AAKA,IAAMiB,iBAA2B,GAAG;AAClCpB,EAAAA,KAAK,EAAE,kEAD2B;AAElCG,EAAAA,IAAI,EAAE;AAF4B,CAApC;IAKakB,MAAM,GAAG;AACpB3B,EAAAA,KADoB,mBACdC,MADc,EACEE,IADF,EACmC;AACrD,WAAOH,KAAK,CAACC,MAAM,CAAC2B,WAAP,EAAD,EAAuBN,cAAvB,EAAuCnB,IAAvC,CAAZ;AACD,GAHmB;AAKpBe,EAAAA,SALoB,uBAKVC,IALU,EAKehB,IALf,EAKgD;AAClE,WAAOe,SAAS,CAACC,IAAD,EAAOG,cAAP,EAAuBnB,IAAvB,CAAhB;AACD;AAPmB;IAUT0B,MAAM,GAAG;AACpB7B,EAAAA,KADoB,mBACdC,MADc,EACEE,IADF,EACuC;AAAA,QAArCA,IAAqC;AAArCA,MAAAA,IAAqC,GAAhB,EAAgB;AAAA;;AACzD,WAAOH,KAAK,CACVG,IAAI,CAACK,KAAL,GACIP,MAAM,CACH2B,WADH,GAEGE,OAFH,CAEW,IAFX,EAEiB,GAFjB,EAGGA,OAHH,CAGW,IAHX,EAGiB,GAHjB,EAIGA,OAJH,CAIW,IAJX,EAIiB,GAJjB,CADJ,GAMI7B,MAPM,EAQVsB,cARU,EASVpB,IATU,CAAZ;AAWD,GAbmB;AAepBe,EAAAA,SAfoB,uBAeVC,IAfU,EAeehB,IAff,EAegD;AAClE,WAAOe,SAAS,CAACC,IAAD,EAAOI,cAAP,EAAuBpB,IAAvB,CAAhB;AACD;AAjBmB;IAoBT4B,SAAS,GAAG;AACvB/B,EAAAA,KADuB,mBACjBC,MADiB,EACDE,IADC,EACgC;AACrD,WAAOH,KAAK,CAACC,MAAD,EAASuB,iBAAT,EAA4BrB,IAA5B,CAAZ;AACD,GAHsB;AAKvBe,EAAAA,SALuB,uBAKbC,IALa,EAKYhB,IALZ,EAK6C;AAClE,WAAOe,SAAS,CAACC,IAAD,EAAOK,iBAAP,EAA0BrB,IAA1B,CAAhB;AACD;AAPsB;IAUZ6B,MAAM,GAAG;AACpBhC,EAAAA,KADoB,mBACdC,MADc,EACEE,IADF,EACmC;AACrD,WAAOH,KAAK,CAACC,MAAD,EAASwB,cAAT,EAAyBtB,IAAzB,CAAZ;AACD,GAHmB;AAKpBe,EAAAA,SALoB,uBAKVC,IALU,EAKehB,IALf,EAKgD;AAClE,WAAOe,SAAS,CAACC,IAAD,EAAOM,cAAP,EAAuBtB,IAAvB,CAAhB;AACD;AAPmB;IAUT8B,SAAS,GAAG;AACvBjC,EAAAA,KADuB,mBACjBC,MADiB,EACDE,IADC,EACgC;AACrD,WAAOH,KAAK,CAACC,MAAD,EAASyB,iBAAT,EAA4BvB,IAA5B,CAAZ;AACD,GAHsB;AAKvBe,EAAAA,SALuB,uBAKbC,IALa,EAKYhB,IALZ,EAK6C;AAClE,WAAOe,SAAS,CAACC,IAAD,EAAOO,iBAAP,EAA0BvB,IAA1B,CAAhB;AACD;AAPsB;IAUZ+B,KAAK,GAAG;AAAElC,EAAAA,KAAK,EAALA,KAAF;AAASkB,EAAAA,SAAS,EAATA;AAAT;;;;;;;;;"}