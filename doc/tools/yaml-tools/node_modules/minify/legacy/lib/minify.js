'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var DIR = __dirname + '/';

var fs = require('fs');
var path = require('path');
var exec = require('execon');
var tomas = require('tomas');
var log = require('debug')('minify');

['js', 'html', 'css', 'img'].forEach(function (name) {
    minify[name] = require(DIR + name);
});

module.exports = minify;

function check(name, callback) {
    if (!name) throw Error('name could not be empty!');

    if (typeof callback !== 'function') throw Error('callback should be function!');
}

function minify(name, options, callback) {
    var EXT = ['js', 'html', 'css'];

    if (!callback) callback = options;

    check(name, callback);

    var ext = path.extname(name).slice(1);
    var is = ~EXT.indexOf(ext);

    if (!is) return callback(Error('File type "' + ext + '" not supported.'));

    tomas.check(name, function (is) {
        exec.if(is, function () {
            tomas.read(name, options, callback);
        }, function (fn) {
            log('optimizing ' + path.basename(name));
            optimize(name, function (error) {
                !error ? fn() : callback(error);
            });
        });
    });
}

function getName(file) {
    var notObj = (typeof file === 'undefined' ? 'undefined' : _typeof(file)) !== 'object';

    if (notObj) return file;

    return Object.keys(file)[0];
}

/**
 * function minificate js,css and html files
 *
 * @param files     -   js, css or html file path
 * @param options   -   object contain main options
 */
function optimize(file, callback) {
    check(file, callback);

    var name = getName(file);

    log('reading file ' + path.basename(name));

    fs.readFile(name, 'utf8', function (error, data) {
        if (error) return callback(error);

        onDataRead(file, data, callback);
    });
}

/**
* Processing of files
* @param fileData {name, data}
*/
function onDataRead(filename, data, callback) {
    log('file ' + path.basename(filename) + ' read');

    var ext = path.extname(filename).replace(/^\./, '');

    minify[ext](data, function (error, data) {
        if (error) return callback(error);

        exec.if(ext !== 'css', function (error, optimizedData) {
            var isStr = typeof optimizedData === 'string';

            if (isStr) data = optimizedData;

            log('writing ' + filename);
            tomas.write(filename, data, callback);
        }, function (callback) {
            minify.img(filename, data, callback);
        });
    });
}