apiVersion: v1
kind: ServiceAccount
metadata:
  name: tars-framework-finalizer
  namespace: {{.Release.Namespace}}
  annotations:
    "helm.sh/hook": pre-delete,post-delete
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
---

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tars-framework-finalizer
  namespace: {{.Release.Namespace}}
  annotations:
    "helm.sh/hook": pre-delete,post-delete
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
rules:
  - apiGroups: [ k8s.tars.io ]
    resources: [ ttrees,ttemplates,timages,tdeploys,taccounts,tconfigs,tservers,texitedrecords,tendpoints,tgateways,tendpoints/status ]
    verbs: [ get ,list, delete, deletecollection ]
---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tars-framework-finalizer
  namespace: {{.Release.Namespace}}
  annotations:
    "helm.sh/hook": pre-delete,post-delete
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: tars-framework-finalizer
subjects:
  - kind: ServiceAccount
    name: tars-framework-finalizer
    namespace: {{.Release.Namespace}}
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: tars-framework-finalizer
  namespace: {{.Release.Namespace}}
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
data:
  run.sh: |
    #!/usr/bin/env bash

    # Job.Pod Token
    TokenValue=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)

    # 一、验证是否存在非框架的TServer，如果存在非框架的TServer，抛异常退出
    Command="curl -s -k -X GET \
    -H 'Authorization: Bearer ${TokenValue}' \
    -H 'Content-Type: application/json' \
    -H 'Accept: application/json' \
    'https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}/apis/k8s.tars.io/{{ .Chart.AppVersion }}/namespaces/{{ .Release.Namespace }}/tservers?labelSelector=tars.io/ServerApp!=tars,tars.io/ServerApp!=base&limit=5'"

    Number=$(eval "${Command}" | jq '.items' | jq 'length')
    if [ ${Number} -gt 0 ];then
      echo "Job \"pre-delete\" helm hook error, exit."
      exit 126
    fi
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: tars-framework-finalizer
  namespace: {{.Release.Namespace}}
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
data:
  run.sh: |
    #!/usr/bin/env bash

    DeleteCollection() {
      Command="curl -s -k -X DELETE \
      -H 'Authorization: Bearer ${2}' \
      -H 'Content-Type: application/json' \
      -H 'Accept: application/json' \
      'https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}/apis/k8s.tars.io/{{ .Chart.AppVersion }}/namespaces/{{ .Release.Namespace }}/${1}?labelSelector='"
      echo "${Command}"

      CommandResponse=$(eval "${Command}")
      echo "${CommandResponse}"
    }

    # Job.Pod Token
    TokenValue=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)

    # 一、删除所有Tars的CRD资源
    declare -a TarsCRDs=(
    tservers
    timages
    tconfigs
    tdeploys
    tendpoints
    tgateways
    texitedrecords
    taccounts
    ttrees
    )
    for KEY in "${TarsCRDs[@]}"; do
      DeleteCollection ${KEY} ${TokenValue}
    done

    # 二、删除TTemplate，因为存在依赖关系，循环删除，总能删完（比较hack）
    for((i=0;i<5;i++));do
      DeleteCollection ttemplates ${TokenValue}
    done
---

apiVersion: batch/v1
kind: Job
metadata:
  name: tars-framework-finalizer
  namespace: {{.Release.Namespace}}
  annotations:
    "helm.sh/hook": pre-delete,post-delete
    "helm.sh/hook-weight": "-9"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  backoffLimit: 0
  completions: 1
  parallelism: 1
  template:
    metadata:
      name: tars-framework-finalizer
      namespace: {{.Release.Namespace}}
    spec:
      containers:
        - name: tars-framework-finalizer
          image:
            {{.Values.helm.dockerhub.registry }}/helm.wait:{{.Values.helm.build.id}}
          command: [ "/tars-framework-finalizer/run.sh" ]
          volumeMounts:
            - name: tars-framework-finalizer
              mountPath: /tars-framework-finalizer
      volumes:
        - configMap:
            defaultMode: 440
            name: tars-framework-finalizer
          name: tars-framework-finalizer
      serviceAccountName: tars-framework-finalizer
      restartPolicy: Never
