apiVersion: v1
kind: ConfigMap
metadata:
  name: tars-tarsweb
  namespace: {{.Release.Namespace}}
data:
  config.json: |
    {
      "show": true,
      "enable": false,
      "els": "http://{{.Values.els.nodes}}",
      "dbConf": {
        "host": "db.tars.com",
        "port": "3306",      
        "user": "tars",      
        "password": "tars2015", 
        "charset": "utf8", 
        "pool": {
            "max": 10,
            "min": 0, 
            "idle": 10000 
          }
      }
    }
  tars.conf: |
    <tars>
      <application>
        #proxy需要的配置
        <client>
          #地址
          locator = tars.tarsregistry.QueryObj@tcp -h registry.tars.com -t 60000 -p 17890 -t 3000
          sync-invoke-timeout = 20000
          #最大超时时间(毫秒)
          max-invoke-timeout = 60000
          #刷新端口时间间隔(毫秒)
          refresh-endpoint-interval = 300000
          #模块间调用[可选]
          stat = tars.tarsstat.StatObj
          #网络异步回调线程个数
          asyncthread = 3
          modulename = tars.system
        </client>
      </application>
    </tars>

---

apiVersion: k8s.tars.io/{{ .Chart.AppVersion }}
kind: TImage
metadata:
  name: tars-tarsweb
  namespace: {{.Release.Namespace}}
  labels:
    tars.io/ServerApp: tars
    tars.io/ServerName: tarsweb
imageType: server
releases:
  - id: {{.Values.helm.build.id | quote }}
    image:
      {{.Values.helm.dockerhub.registry }}/tars.tarsweb:{{.Values.helm.build.id}}
---

apiVersion: k8s.tars.io/{{ .Chart.AppVersion }}
kind: TServer
metadata:
  name: tars-tarsweb
  namespace: {{.Release.Namespace}}
  labels:
    tars.io/ServerApp: tars
    tars.io/ServerName: tarsweb
    tars.io/SubType: normal
spec:
  app: tars
  server: tarsweb
  subType: normal
  normal:
    ports:
      - name: http
        port: 3000
  k8s:
    serviceAccount: tars-tarsweb
    env:
      - name: Namespace
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
      - name: ENABLE_K8S
        value: "true"
      - name: PodName
        valueFrom:
          fieldRef:
            fieldPath: metadata.name
    replicas: 1
    mounts:
      - name: host-log-dir
        source:
          hostPath:
            path: /usr/local/app/tars/app_log
            type: DirectoryOrCreate
        mountPath: /tars-web/log
        subPathExpr: $(Namespace)/$(PodName)
      - name: etc
        source:
          configMap:
            name: tars-tarsweb
        mountPath: /mnt/config

  release:
    id: {{.Values.helm.build.id | quote }}
    source: tars-tarsweb
    image:
      {{.Values.helm.dockerhub.registry }}/tars.tarsweb:{{.Values.helm.build.id}}
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: tars-tarsweb
  namespace: {{.Release.Namespace}}
---

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tars-tarsweb
  namespace: {{.Release.Namespace}}
rules:
  - apiGroups: [ "" ]
    resources: [ pods ]
    verbs: [ get,list ]
  - apiGroups: [ "" ]
    resources: [ pods/exec ]
    verbs: [ create, get ]
  - apiGroups: [ k8s.tars.io ]
    resources: [ ttrees ]
    verbs: [ get ,list,watch,patch,update ]
  - apiGroups: [ k8s.tars.io ]
    resources: [ tdeploys, tservers, ttemplates, treleases,tconfigs,taccounts, tgateways, timages ]
    verbs: [ create, get ,list,delete,watch ,patch, update ]
  - apiGroups: [ k8s.tars.io ]
    resources: [ tendpoints,tendpoints/status,texitedrecords ]
    verbs: [ get ,list, watch ]
---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tars-tarsweb
  namespace: {{.Release.Namespace}}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: tars-tarsweb
subjects:
  - kind: ServiceAccount
    name: tars-tarsweb
    namespace: {{.Release.Namespace}}
---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{.Release.Namespace}}:tars-tarsweb
rules:
  - apiGroups: [ "" ]
    resources: [ nodes ]
    verbs: [ get,list, watch,update ]
---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{.Release.Namespace}}:tars-tarsweb
subjects:
  - kind: ServiceAccount
    name: tars-tarsweb
    namespace: {{.Release.Namespace}}
roleRef:
  kind: ClusterRole
  name: {{.Release.Namespace}}:tars-tarsweb
  apiGroup: rbac.authorization.k8s.io

---
kind: Ingress
apiVersion: extensions/v1beta1
metadata:
  name: tars-web
  annotations:
    nginx.org/client-max-body-size: "0"
    nginx.org/websocket-services: tars-tarsweb
    # 低版本的ingress必须要填proxy-body-size才能上传包
    nginx.ingress.kubernetes.io/proxy-body-size: 100m
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "1200"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "1200"
spec:
  rules:
    - host: {{.Values.web}}
      http:
        paths:
          - backend:
              serviceName: tars-tarsweb
              servicePort: 3000
